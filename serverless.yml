service: cake-ordering-system

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1

  iam:
    role:
      statements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource:
          - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/ordersTable
      - Effect: Allow
        Action:
          - kinesis:PutRecord
        Resource:
          - arn:aws:kinesis:${aws:region}:${aws:accountId}:stream/order-events
      - Effect: Allow
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource:
          - "*"
        Condition:
          StringEquals:
            ses:FromAddress:
            - jekasystem@grr.la
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource:
          - arn:aws:sqs:${aws:region}:${aws:accountId}:deliveryServiceQueue
          - arn:aws:sqs:${aws:region}:${aws:accountId}:customerServiceQueue

functions:
  createOrder:
    handler: handler.createOrder
    events:
      - http:
          path: /order
          method: post
    environment:
      ordersTableName: ordersTable
      orderStreamName: order-events
  orderFulfillment:
    handler: handler.orderFulfillment
    events:
      - http:
          path: /order/fulfill
          method: post
    environment:
      ordersTableName: ordersTable
      orderStreamName: order-events
  notifyExternalParties:
    handler: handler.notifyExternalParties
    events:
      - stream:
          type: kinesis
          arn: !GetAtt orderEventsStream.Arn
    environment:
      region: ${self:provider.region}
      cakeProducerEmail: jekaproducer@grr.la
      orderingSystemEmail: jekasystem@grr.la
      deliveryCompanyQueue:
        Ref: deliveryServiceQueue
      ordersTableName: ordersTable
  notifyDeliveryCompany:
    handler: handler.notifyDeliveryCompany
    events:
      - sqs:
          arn: !GetAtt deliveryServiceQueue.Arn
          batchSize: 1
  orderDelivered:
    handler: handler.orderDelivered
    events:
      - http:
          path: /order/delivered
          method: post
    environment:
      region: ${self:provider.region}
      ordersTableName: ordersTable
      customerServiceQueue: 
        Ref: customerServiceQueue
  notifyCustomerService:
    handler: handler.notifyCustomerService
    events:
      - sqs: 
          arn: !GetAtt customerServiceQueue.Arn
          batchSize: 1

resources:
  Resources:
    orderEventsStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: order-events
        ShardCount: 1
    orderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ordersTable
        AttributeDefinitions:
          - AttributeName: "orderId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "orderId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
    deliveryServiceQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: deliveryServiceQueue
    customerServiceQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: customerServiceQueue
